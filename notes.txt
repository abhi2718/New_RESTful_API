// https://www.youtube.com/watch?v=8O4qTCHDmbU&list=PLWkguCWKqN9OncFtHmijyW0VS6f5BEKpV&index=1
mongoose :- 
mongoose is ODM i.e Object Data Mapping which convert the mongodb document into object so that node js can access methods and properties

Populate more than one properties :
const userInfo = await User.findById(user._id).populate(["following","userRef]);

Adding following in userSchema as array  of id and pushing new following -> 

const mongoose = require("mongoose"),
  bcrypt = require("bcrypt"),
  Schema = mongoose.Schema,
  userSchema = new Schema(
    {
      name: {
        type: String,
        require: true,
      },
      email: {
        type: String,
        require: true,
      },
      password: {
        type: String,
        require: true,
        select: false,
      },
      following: [{
        type: Schema.Types.ObjectId,
        ref:"User"
      }]
    },
    {
      timestamps: true,
    }
  );
userSchema.methods.encryptPassword = async function (password) {
  const salt = await bcrypt.genSalt(5);
  const hash = await bcrypt.hash(password, salt);
  return hash;
};
userSchema.methods.validatePassword = async function (candidatePassword) {
  const result = await bcrypt.compare(candidatePassword, this.password);
  return result;
};
module.exports = mongoose.model("User", userSchema);


exports.fllow = async(req, res, next) => { 
    try {
        req.user.following.push(req.params.id);
        await req.user.save();
        res.status(200).json({message:"success"})
    } catch (error) {
        next(error);
    }
}

# Important Operators of mongodb are 

$set operator replaces the value of a field with the specified value.
The $set
 operator expression has the following form:

{ $set: { <field1>: <value1>, ... } }
To specify a <field> in an embedded document or in an array, use dot notation.
Visit this link for more information => https://www.mongodb.com/docs/manual/reference/operator/update/set/

 
$unset
 operator deletes a particular field. Consider the following syntax:
{ $unset: { <field1>: "", ... } }

 The specified value in the $unset 
 expression (i.e. "") does not impact the operation.
 To specify a <field> in an embedded document or in an array, use dot notation.
 Visit this link for more information => https://www.mongodb.com/docs/manual/reference/operator/update/unset/#:~:text=The%20%24unset%20operator%20deletes%20a,an%20array%2C%20use%20dot%20notation.


$push
The $push operator appends a specified value to an array.

The $push
 operator has the form:
{ $push: { <field1>: <value1>, ... } }
To specify a <field> in an embedded document or in an array, use dot notation.
for more information => https://www.mongodb.com/docs/manual/reference/operator/update/push/

# Updating a document inside  array of object :-

   const user = await User.updateOne({
      _id: req.params.id,
      "following.id":req.params.id  <--- It will perform projection 
    }, {
      $set:{ "following.$.name":req.body.name },
    });


# $pull 
The $pull operator removes from an existing array all instances of a value or values that match a specified condition.

The $pull
operator has the form:
{ $pull: { <field1>: <value|condition>, <field2>: <value|condition>, ... } }
To specify a <field> in an embedded document or in an array, use dot notation.

